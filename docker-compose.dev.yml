version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: bash -c "./run_web_service.sh"
    volumes:
      - static_volume:/home/vsf/web/measurement_navigator/static
      - ./measurement_navigator/vsf:/home/vsf/web/measurement_navigator/vsf # DON'T PUSH
    expose:
      - 8000
    env_file:
      - ./.env.prod
    depends_on:
      - db
  db:
    image: timescale/timescaledb-ha:pg14-latest
    volumes:
      - postgres_data:/home/postgres/pgdata/data
    env_file:
      - ./.env.prod.db
    hostname: postgres
  nginx:
    image: nginx:latest
    volumes:
      - static_volume:/home/vsf/web/measurement_navigator/static
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 1337:80
      - 5555:5555
      - 9090:9090
      - 3000:3000
      - 9100:9100
    depends_on:
      - web
      - flower
    hostname: nginx
  redis:
    image: redis:alpine
    expose: 
      - 6379

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A vsf worker -l info -s /tmp/celerybeat-schedule
    volumes:
      - ./:/home/vsf/web
    env_file:
      - .env.prod
    depends_on:
      - redis
    restart: unless-stopped

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A vsf beat -l info -s /tmp/celerybeat-schedule
    volumes:
      - ./:/home/vsf/web
    env_file:
      - .env.prod
    depends_on:
      - redis
    restart: unless-stopped

  flower:
    image: mher/flower
    command: celery --broker=redis://redis:6379/0 flower  --port=5555
    ports:
      - 5557:5555
    depends_on:
      - redis
    expose:
      - 5555
    hostname: flower

# Servicios de monitoreo !!!!!!!!!!!!!!!!!
  # Herramienta visualizadora
  grafana:
    image: grafana/grafana:8.0.6
    # image: grafana/grafana:8.0.6
    container_name: grafana
    restart: unless-stopped
    volumes:
    - grafana-data:/var/lib/grafana
    # ports:
    # - 3000:3000
    expose:
      - 3000

  # Se encarga de procesar las metricas
  prometheus:
    image: prom/prometheus
    # image: prom/prometheus:v2.28.1
    container_name: prometheus
    restart: unless-stopped
    volumes:
    - ./prometheus:/etc/prometheus
    - prometheus-data:/prometheus
    # ports:
    # - 9090:9090
    expose:
      - 9090
    command:
    - '--config.file=/etc/prometheus/prometheus.yml'
    - '--storage.tsdb.path=/prometheus'
    - '--storage.tsdb.retention.time=1y'
    - '--web.enable-lifecycle'

  # Se encarga de enviar metricas de la instancia en general (RAM, ROM, RED...)
  node_exporter:
    image: prom/node-exporter
    # image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    # ports:
    # - 9100:9100
    expose:
      - 9100
    # TODO probar el bloque que funcione dependiendo del S.O.
    ###### linux
    # command:
    # - '--path.rootfs=/host'
    # pid: host
    # volumes:
    # - '/:/host:ro,rslave'
    ###### windows
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"


volumes:
  postgres_data:
  static_volume:
  # grafana almacena los dashboards
  # prometheus la data de monitoreo
  grafana-data:
  prometheus-data: