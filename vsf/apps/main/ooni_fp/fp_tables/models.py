#   django imports
from django.db                      import models
from model_utils.models import TimeStampedModel

from django.contrib.postgres.fields import JSONField
from django.utils 					import timezone

"""
    This model is based on the following data base model
    from the ooni fast path database:
    https://github.com/ooni/pipeline/blob/master/af/oometa/018-fastpath.install.sql
	Warning: Even though the above link should be the data model, that's not what actually
	happens, so we adopted the actual data format that comes from the api when you make requests like:
	curl https://api.ooni.io/api/v1/measurements?until=2020-07-15&probe_cc=VE&since=2020-07-14

	The ones whose measurement_id starts with 'temp-fid' are the ones that comes from the fast path
"""

class FastPath(TimeStampedModel):
	"""
		This table represents data as it comes from the ooni fast path.
		Almost every field comes in the measurement report given by the
		fast path unless it's specified otherwise.

		The only special fields are:
			- report_ready : NullBooleanField. This Field tells if the report
			is ready in the ooni backend. If it is, this field returns true.
			If it isn't ready, this field returns false. If the field should be ready
			but it is not, this field returns null

			- ready_date : the timestap where this measurement was catched. The measurement
			data should be available 24 hours after.
	"""
	class Ootest(models.TextChoices):
		"""
		The ootest enum definition can be found in here
			https://github.com/ooni/api/blob/master/measurements/openapi/measurements.yml#L46
		"""
		# a human readable string name will be generated by django
		# from the variable names since it's not provided
		WEB_CONNECTIVITY = 'web_connectivity'
		HTTP_REQUESTS = 'http_requests'
		DNS_CONSISTENCY = 'dns_consistency'
		HTTP_INVALID_REQUEST_LINE = 'http_invalid_request_line'
		BRIDGE_REACHABILITY = 'bridge_reachability'
		TCP_CONNECT = 'tcp_connect'
		HTTP_HEADER_FIELD_MANIPULATION = 'http_header_field_manipulation'
		HTTP_HOST = 'http_host'
		MULTI_PROTOCOL_TRACEROUTE = 'multi_protocol_traceroute'
		MEEK_FRONTED_REQUESTS_TEST = 'meek_fronted_requests_test'
		WHATSAPP = 'whatsapp'
		VANILLA_TOR = 'vanilla_tor'
		FACEBOOK_MESSENGER = 'facebook_messenger'
		NDT = 'ndt'
		DASH = 'dash'
		TELEGRAM = 'telegram'
		PSIPHON = 'psiphon'
		TOR = 'tor'
		UNKNOWN = 'unknown'

	class DataReady(models.TextChoices):
		"""
			The DataReady Enum lists all the possible states that a fastpath measurement
			can adopt
		"""
		READY 		 = "ready" # The entire measurement is stored in the database
		NOT_READY 	 = "not_ready" # The measurement is not supposed to be available in the ooni api yet
		UNDETERMINED = "undetermined" # The measurement should be available in the ooni api, but we could not found it
		DEAD		 = "dead" #The measurement could not be found for a long time, so it will be ignored

	anomaly = models.BooleanField(default=False)
	confirmed = models.BooleanField(default=False)
	failure = models.BooleanField(default=False)
	input = models.TextField()
	tid = models.CharField(max_length=100, null=True) # measurement id == tid
	measurement_start_time = models.DateTimeField()
	measurement_url = models.URLField(null=True, max_length=500)
	probe_asn = models.CharField(null=False, max_length=20)
	probe_cc = models.CharField(max_length=2)
	report_id = models.CharField(null=False, max_length=100)
	scores = JSONField()
	test_name = models.CharField(choices=Ootest.choices, max_length=40)
	# The following fields are defined by our database logic.
	report_ready = models.NullBooleanField(default=False) # DEPRECATE LATER
	#	data_ready = enum that checks if the measurement is ready, not ready, undefined or dead
	data_ready = models.CharField(max_length=20, null=False, choices=DataReady.choices, default=DataReady.NOT_READY) 
	#	when was this measurement catched ?
	catch_date = models.DateTimeField(default=timezone.now)
	#	how many times we tried to retrieve this measurement from the ooni api
	trys = models.IntegerField(null=False, default=0)	